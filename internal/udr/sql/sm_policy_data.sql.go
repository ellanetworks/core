// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sm_policy_data.sql

package sql

import (
	"context"
)

const createSMPolicyData = `-- name: CreateSMPolicyData :one
INSERT INTO sm_policy_data (
  ue_id
) VALUES (
  ?
)
RETURNING id, ue_id
`

func (q *Queries) CreateSMPolicyData(ctx context.Context, ueID string) (SmPolicyDatum, error) {
	row := q.db.QueryRowContext(ctx, createSMPolicyData, ueID)
	var i SmPolicyDatum
	err := row.Scan(&i.ID, &i.UeID)
	return i, err
}

const getSMPolicyData = `-- name: GetSMPolicyData :one
SELECT id, ue_id FROM sm_policy_data
WHERE id = ? LIMIT 1
`

func (q *Queries) GetSMPolicyData(ctx context.Context, id int64) (SmPolicyDatum, error) {
	row := q.db.QueryRowContext(ctx, getSMPolicyData, id)
	var i SmPolicyDatum
	err := row.Scan(&i.ID, &i.UeID)
	return i, err
}

const getSMPolicyDataByUeId = `-- name: GetSMPolicyDataByUeId :one
SELECT id, ue_id FROM sm_policy_data
WHERE ue_id = ? LIMIT 1
`

func (q *Queries) GetSMPolicyDataByUeId(ctx context.Context, ueID string) (SmPolicyDatum, error) {
	row := q.db.QueryRowContext(ctx, getSMPolicyDataByUeId, ueID)
	var i SmPolicyDatum
	err := row.Scan(&i.ID, &i.UeID)
	return i, err
}
