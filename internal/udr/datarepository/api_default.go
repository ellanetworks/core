/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package datarepository

import (
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/omec-project/openapi"
	"github.com/omec-project/openapi/models"
	"github.com/omec-project/util/httpwrapper"
	"github.com/yeastengine/ella/internal/udr/logger"
	"github.com/yeastengine/ella/internal/udr/producer"
	"github.com/yeastengine/ella/internal/udr/util"
)

func sendResponse(c *gin.Context, rsp *httpwrapper.Response) {
	for k, v := range rsp.Header {
		// TODO: concatenate all values
		c.Header(k, v[0])
	}
	serializedBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorf("Serialize Response Body error: %+v", err)
		pd := util.ProblemDetailsSystemFailure(err.Error())
		c.JSON(http.StatusInternalServerError, pd)
	} else {
		c.Data(rsp.Status, "application/json", serializedBody)
	}
}

func getDataFromRequestBody(c *gin.Context, data interface{}) error {
	reqBody, err := c.GetRawData()
	if err != nil {
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		pd := util.ProblemDetailsSystemFailure(err.Error())
		c.JSON(http.StatusInternalServerError, pd)
		return err
	}

	err = openapi.Deserialize(data, reqBody, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorf("Deserialize Request Body error: %+v", err)
		pd := util.ProblemDetailsMalformedReqSyntax(err.Error())
		c.JSON(http.StatusBadRequest, pd)
		return err
	}
	return err
}

// HTTPExposureDataSubsToNotifyPost -
func HTTPExposureDataSubsToNotifyPost(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPExposureDataSubsToNotifySubIdDelete - Deletes a subcription for notifications
func HTTPExposureDataSubsToNotifySubIdDelete(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPExposureDataSubsToNotifySubIdPut - updates a subcription for notifications
func HTTPExposureDataSubsToNotifySubIdPut(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPPolicyDataSubsToNotifyPost -
func HTTPPolicyDataSubsToNotifyPost(c *gin.Context) {
	var policyDataSubscription models.PolicyDataSubscription

	if err := getDataFromRequestBody(c, &policyDataSubscription); err != nil {
		return
	}

	req := httpwrapper.NewRequest(c.Request, policyDataSubscription)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePolicyDataSubsToNotifyPost(req)

	for key, val := range rsp.Header {
		c.Header(key, val[0])
	}

	sendResponse(c, rsp)
}

// HTTPPolicyDataSubsToNotifySubsIdDelete -
func HTTPPolicyDataSubsToNotifySubsIdDelete(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["subsId"] = c.Params.ByName("subsId")

	rsp := producer.HandlePolicyDataSubsToNotifySubsIdDelete(req)

	sendResponse(c, rsp)
}

// HTTPPolicyDataSubsToNotifySubsIdPut -
func HTTPPolicyDataSubsToNotifySubsIdPut(c *gin.Context) {
	var policyDataSubscription models.PolicyDataSubscription

	if err := getDataFromRequestBody(c, &policyDataSubscription); err != nil {
		return
	}

	req := httpwrapper.NewRequest(c.Request, policyDataSubscription)
	req.Params["subsId"] = c.Params.ByName("subsId")

	rsp := producer.HandlePolicyDataSubsToNotifySubsIdPut(req)

	sendResponse(c, rsp)
}

// HTTPPolicyDataUesUeIdAmDataGet -
func HTTPPolicyDataUesUeIdAmDataGet(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePolicyDataUesUeIdAmDataGet(req)

	sendResponse(c, rsp)
}

// HTTPPolicyDataUesUeIdSmDataGet -
func HTTPPolicyDataUesUeIdSmDataGet(c *gin.Context) {
	req := httpwrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePolicyDataUesUeIdSmDataGet(req)

	sendResponse(c, rsp)
}
