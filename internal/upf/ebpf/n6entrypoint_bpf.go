// Code generated by bpf2go; DO NOT EDIT.

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type N6EntrypointFarInfo struct {
	_                     structs.HostLayout
	Action                uint8
	OuterHeaderCreation   uint8
	_                     [2]byte
	Teid                  uint32
	Remoteip              uint32
	Localip               uint32
	TransportLevelMarking uint16
	_                     [2]byte
}

type N6EntrypointFiveTuple struct {
	_     structs.HostLayout
	Saddr uint32
	Daddr uint32
	Sport uint16
	Dport uint16
	Proto uint16
	_     [2]byte
}

type N6EntrypointIn6Addr struct {
	_    structs.HostLayout
	In6U struct {
		_       structs.HostLayout
		U6Addr8 [16]uint8
	}
}

type N6EntrypointNatEntry struct {
	_         structs.HostLayout
	Src       N6EntrypointFiveTuple
	RefreshTs uint64
}

type N6EntrypointPdrInfo struct {
	_                  structs.HostLayout
	FarId              uint32
	QerId              uint32
	OuterHeaderRemoval uint8
	SdfMode            uint8
	_                  [6]byte
	SdfRules           struct {
		_         structs.HostLayout
		SdfFilter struct {
			_       structs.HostLayout
			SrcAddr struct {
				_    structs.HostLayout
				Type uint8
				_    [15]byte
				Ip   [16]byte /* uint128 */
				Mask [16]byte /* uint128 */
			}
			DstAddr struct {
				_    structs.HostLayout
				Type uint8
				_    [15]byte
				Ip   [16]byte /* uint128 */
				Mask [16]byte /* uint128 */
			}
			SrcPort struct {
				_          structs.HostLayout
				LowerBound uint16
				UpperBound uint16
			}
			DstPort struct {
				_          structs.HostLayout
				LowerBound uint16
				UpperBound uint16
			}
			Protocol uint8
			_        [7]byte
		}
		OuterHeaderRemoval uint8
		_                  [3]byte
		FarId              uint32
		QerId              uint32
		_                  [4]byte
	}
}

type N6EntrypointQerInfo struct {
	_                structs.HostLayout
	UlGateStatus     uint8
	DlGateStatus     uint8
	Qfi              uint8
	_                [1]byte
	UlMaximumBitrate uint32
	DlMaximumBitrate uint32
	_                [4]byte
	UlStart          uint64
	DlStart          uint64
}

type N6EntrypointRouteStat struct {
	_                     structs.HostLayout
	FibLookupIp4Cache     uint64
	FibLookupIp4Ok        uint64
	FibLookupIp4ErrorDrop uint64
	FibLookupIp4ErrorPass uint64
	FibLookupIp6Cache     uint64
	FibLookupIp6Ok        uint64
	FibLookupIp6ErrorDrop uint64
	FibLookupIp6ErrorPass uint64
}

type N6EntrypointUpfStatistic struct {
	_           structs.HostLayout
	UpfCounters struct {
		_     structs.HostLayout
		Bytes uint64
	}
	UpfCounter struct {
		_  structs.HostLayout
		Rx uint64
		Tx uint64
	}
	XdpActions [8]uint64
}

// LoadN6Entrypoint returns the embedded CollectionSpec for N6Entrypoint.
func LoadN6Entrypoint() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_N6EntrypointBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load N6Entrypoint: %w", err)
	}

	return spec, err
}

// LoadN6EntrypointObjects loads N6Entrypoint and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*N6EntrypointObjects
//	*N6EntrypointPrograms
//	*N6EntrypointMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadN6EntrypointObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadN6Entrypoint()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// N6EntrypointSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type N6EntrypointSpecs struct {
	N6EntrypointProgramSpecs
	N6EntrypointMapSpecs
	N6EntrypointVariableSpecs
}

// N6EntrypointProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type N6EntrypointProgramSpecs struct {
	UpfN6EntrypointFunc *ebpf.ProgramSpec `ebpf:"upf_n6_entrypoint_func"`
}

// N6EntrypointMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type N6EntrypointMapSpecs struct {
	DownlinkRouteStats *ebpf.MapSpec `ebpf:"downlink_route_stats"`
	DownlinkStatistics *ebpf.MapSpec `ebpf:"downlink_statistics"`
	FarMap             *ebpf.MapSpec `ebpf:"far_map"`
	NatCt              *ebpf.MapSpec `ebpf:"nat_ct"`
	PdrsDownlinkIp4    *ebpf.MapSpec `ebpf:"pdrs_downlink_ip4"`
	PdrsDownlinkIp6    *ebpf.MapSpec `ebpf:"pdrs_downlink_ip6"`
	QerMap             *ebpf.MapSpec `ebpf:"qer_map"`
}

// N6EntrypointVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type N6EntrypointVariableSpecs struct {
	Masquerade *ebpf.VariableSpec `ebpf:"masquerade"`
}

// N6EntrypointObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadN6EntrypointObjects or ebpf.CollectionSpec.LoadAndAssign.
type N6EntrypointObjects struct {
	N6EntrypointPrograms
	N6EntrypointMaps
	N6EntrypointVariables
}

func (o *N6EntrypointObjects) Close() error {
	return _N6EntrypointClose(
		&o.N6EntrypointPrograms,
		&o.N6EntrypointMaps,
	)
}

// N6EntrypointMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadN6EntrypointObjects or ebpf.CollectionSpec.LoadAndAssign.
type N6EntrypointMaps struct {
	DownlinkRouteStats *ebpf.Map `ebpf:"downlink_route_stats"`
	DownlinkStatistics *ebpf.Map `ebpf:"downlink_statistics"`
	FarMap             *ebpf.Map `ebpf:"far_map"`
	NatCt              *ebpf.Map `ebpf:"nat_ct"`
	PdrsDownlinkIp4    *ebpf.Map `ebpf:"pdrs_downlink_ip4"`
	PdrsDownlinkIp6    *ebpf.Map `ebpf:"pdrs_downlink_ip6"`
	QerMap             *ebpf.Map `ebpf:"qer_map"`
}

func (m *N6EntrypointMaps) Close() error {
	return _N6EntrypointClose(
		m.DownlinkRouteStats,
		m.DownlinkStatistics,
		m.FarMap,
		m.NatCt,
		m.PdrsDownlinkIp4,
		m.PdrsDownlinkIp6,
		m.QerMap,
	)
}

// N6EntrypointVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadN6EntrypointObjects or ebpf.CollectionSpec.LoadAndAssign.
type N6EntrypointVariables struct {
	Masquerade *ebpf.Variable `ebpf:"masquerade"`
}

// N6EntrypointPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadN6EntrypointObjects or ebpf.CollectionSpec.LoadAndAssign.
type N6EntrypointPrograms struct {
	UpfN6EntrypointFunc *ebpf.Program `ebpf:"upf_n6_entrypoint_func"`
}

func (p *N6EntrypointPrograms) Close() error {
	return _N6EntrypointClose(
		p.UpfN6EntrypointFunc,
	)
}

func _N6EntrypointClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed n6entrypoint_bpf.o
var _N6EntrypointBytes []byte
