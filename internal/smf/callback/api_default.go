/*
 * Nsmf_EventExposure
 *
 * Session Management Event Exposure Service API
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package callback

import (
	"log"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/omec-project/openapi"
	"github.com/omec-project/openapi/models"
	"github.com/omec-project/util/httpwrapper"
	"github.com/yeastengine/ella/internal/smf/fsm"
	"github.com/yeastengine/ella/internal/smf/logger"
	"github.com/yeastengine/ella/internal/smf/msgtypes/svcmsgtypes"
	"github.com/yeastengine/ella/internal/smf/transaction"
)

// SubscriptionsPost -
func HTTPSmPolicyUpdateNotification(c *gin.Context) {
	var request models.SmPolicyNotification

	reqBody, _ := c.GetRawData()

	err := openapi.Deserialize(&request, reqBody, c.ContentType())
	if err != nil {
		logger.PduSessLog.Errorln("Deserialize request failed")
	}

	reqWrapper := httpwrapper.NewRequest(c.Request, request)
	reqWrapper.Params["smContextRef"] = c.Params.ByName("smContextRef")

	smContextRef := reqWrapper.Params["smContextRef"]
	log.Printf("HTTPSmPolicyUpdateNotification received for UUID = %v", smContextRef)

	txn := transaction.NewTransaction(reqWrapper.Body.(models.SmPolicyNotification), nil, svcmsgtypes.SmfMsgType(svcmsgtypes.SmPolicyUpdateNotification))
	txn.CtxtKey = smContextRef
	go txn.StartTxnLifeCycle(fsm.SmfTxnFsmHandle)
	<-txn.Status // wait for txn to complete at SMF
	HTTPResponse := txn.Rsp.(*httpwrapper.Response)
	// HTTPResponse := producer.HandleSMPolicyUpdateNotify(smContextRef, reqWrapper.Body.(models.SmPolicyNotification))

	for key, val := range HTTPResponse.Header {
		c.Header(key, val[0])
	}

	resBody, _ := openapi.Serialize(HTTPResponse.Body, "application/json")
	c.Writer.Write(resBody)
	c.Status(HTTPResponse.Status)
}

func SmPolicyControlTerminationRequestNotification(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

func N1N2FailureNotification(c *gin.Context) {
	logger.PduSessLog.Info("Receive N1N2 Failure Notification")

	var request models.N1N2MsgTxfrFailureNotification

	req := httpwrapper.NewRequest(c.Request, request)

	req.Params["smContextRef"] = c.Params.ByName("smContextRef")

	smContextRef := req.Params["smContextRef"]
	txn := transaction.NewTransaction(req.Body.(models.N1N2MsgTxfrFailureNotification), nil, svcmsgtypes.SmfMsgType(svcmsgtypes.N1N2MessageTransferFailureNotification))
	txn.CtxtKey = smContextRef
	go txn.StartTxnLifeCycle(fsm.SmfTxnFsmHandle)
	<-txn.Status

	c.Status(http.StatusNoContent)
}
