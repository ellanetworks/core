// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: device_groups.sql

package sql

import (
	"context"
)

const addSubscriberToDeviceGroup = `-- name: AddSubscriberToDeviceGroup :exec
INSERT INTO device_group_subscribers (
  device_group_id, subscriber_id
) VALUES (
  ?, ?
)
`

type AddSubscriberToDeviceGroupParams struct {
	DeviceGroupID int64
	SubscriberID  int64
}

func (q *Queries) AddSubscriberToDeviceGroup(ctx context.Context, arg AddSubscriberToDeviceGroupParams) error {
	_, err := q.db.ExecContext(ctx, addSubscriberToDeviceGroup, arg.DeviceGroupID, arg.SubscriberID)
	return err
}

const createDeviceGroup = `-- name: CreateDeviceGroup :one
INSERT INTO device_groups (
  name, site_info, ip_domain_name, dnn, ue_ip_pool, dns_primary, mtu, dnn_mbr_uplink, dnn_mbr_downlink, traffic_class_name, traffic_class_arp, traffic_class_pdb, traffic_class_pelr, traffic_class_qci
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
RETURNING id, name, site_info, ip_domain_name, dnn, ue_ip_pool, dns_primary, mtu, dnn_mbr_uplink, dnn_mbr_downlink, traffic_class_name, traffic_class_arp, traffic_class_pdb, traffic_class_pelr, traffic_class_qci
`

type CreateDeviceGroupParams struct {
	Name             string
	SiteInfo         string
	IpDomainName     string
	Dnn              string
	UeIpPool         string
	DnsPrimary       string
	Mtu              int64
	DnnMbrUplink     int64
	DnnMbrDownlink   int64
	TrafficClassName string
	TrafficClassArp  int64
	TrafficClassPdb  int64
	TrafficClassPelr int64
	TrafficClassQci  int64
}

func (q *Queries) CreateDeviceGroup(ctx context.Context, arg CreateDeviceGroupParams) (DeviceGroup, error) {
	row := q.db.QueryRowContext(ctx, createDeviceGroup,
		arg.Name,
		arg.SiteInfo,
		arg.IpDomainName,
		arg.Dnn,
		arg.UeIpPool,
		arg.DnsPrimary,
		arg.Mtu,
		arg.DnnMbrUplink,
		arg.DnnMbrDownlink,
		arg.TrafficClassName,
		arg.TrafficClassArp,
		arg.TrafficClassPdb,
		arg.TrafficClassPelr,
		arg.TrafficClassQci,
	)
	var i DeviceGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SiteInfo,
		&i.IpDomainName,
		&i.Dnn,
		&i.UeIpPool,
		&i.DnsPrimary,
		&i.Mtu,
		&i.DnnMbrUplink,
		&i.DnnMbrDownlink,
		&i.TrafficClassName,
		&i.TrafficClassArp,
		&i.TrafficClassPdb,
		&i.TrafficClassPelr,
		&i.TrafficClassQci,
	)
	return i, err
}

const deleteDeviceGroup = `-- name: DeleteDeviceGroup :exec
DELETE FROM device_groups
WHERE id = ?
`

func (q *Queries) DeleteDeviceGroup(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDeviceGroup, id)
	return err
}

const getDeviceGroup = `-- name: GetDeviceGroup :one
SELECT id, name, site_info, ip_domain_name, dnn, ue_ip_pool, dns_primary, mtu, dnn_mbr_uplink, dnn_mbr_downlink, traffic_class_name, traffic_class_arp, traffic_class_pdb, traffic_class_pelr, traffic_class_qci FROM device_groups
WHERE id = ? LIMIT 1
`

func (q *Queries) GetDeviceGroup(ctx context.Context, id int64) (DeviceGroup, error) {
	row := q.db.QueryRowContext(ctx, getDeviceGroup, id)
	var i DeviceGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SiteInfo,
		&i.IpDomainName,
		&i.Dnn,
		&i.UeIpPool,
		&i.DnsPrimary,
		&i.Mtu,
		&i.DnnMbrUplink,
		&i.DnnMbrDownlink,
		&i.TrafficClassName,
		&i.TrafficClassArp,
		&i.TrafficClassPdb,
		&i.TrafficClassPelr,
		&i.TrafficClassQci,
	)
	return i, err
}

const getDeviceGroupByName = `-- name: GetDeviceGroupByName :one
SELECT id, name, site_info, ip_domain_name, dnn, ue_ip_pool, dns_primary, mtu, dnn_mbr_uplink, dnn_mbr_downlink, traffic_class_name, traffic_class_arp, traffic_class_pdb, traffic_class_pelr, traffic_class_qci FROM device_groups
WHERE name = ? LIMIT 1
`

func (q *Queries) GetDeviceGroupByName(ctx context.Context, name string) (DeviceGroup, error) {
	row := q.db.QueryRowContext(ctx, getDeviceGroupByName, name)
	var i DeviceGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SiteInfo,
		&i.IpDomainName,
		&i.Dnn,
		&i.UeIpPool,
		&i.DnsPrimary,
		&i.Mtu,
		&i.DnnMbrUplink,
		&i.DnnMbrDownlink,
		&i.TrafficClassName,
		&i.TrafficClassArp,
		&i.TrafficClassPdb,
		&i.TrafficClassPelr,
		&i.TrafficClassQci,
	)
	return i, err
}

const listDeviceGroups = `-- name: ListDeviceGroups :many
SELECT id, name, site_info, ip_domain_name, dnn, ue_ip_pool, dns_primary, mtu, dnn_mbr_uplink, dnn_mbr_downlink, traffic_class_name, traffic_class_arp, traffic_class_pdb, traffic_class_pelr, traffic_class_qci FROM device_groups
ORDER BY id
`

func (q *Queries) ListDeviceGroups(ctx context.Context) ([]DeviceGroup, error) {
	rows, err := q.db.QueryContext(ctx, listDeviceGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeviceGroup
	for rows.Next() {
		var i DeviceGroup
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SiteInfo,
			&i.IpDomainName,
			&i.Dnn,
			&i.UeIpPool,
			&i.DnsPrimary,
			&i.Mtu,
			&i.DnnMbrUplink,
			&i.DnnMbrDownlink,
			&i.TrafficClassName,
			&i.TrafficClassArp,
			&i.TrafficClassPdb,
			&i.TrafficClassPelr,
			&i.TrafficClassQci,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const numDeviceGroups = `-- name: NumDeviceGroups :one
SELECT COUNT(*) FROM device_groups
`

func (q *Queries) NumDeviceGroups(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, numDeviceGroups)
	var count int64
	err := row.Scan(&count)
	return count, err
}
