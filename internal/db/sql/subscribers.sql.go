// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: subscribers.sql

package db

import (
	"context"
)

const createSubscriber = `-- name: CreateSubscriber :one
INSERT INTO subscribers (
  imsi, plmn_id, opc, key, sequence_number
) VALUES (
  ?, ?, ?, ?, ?
)
RETURNING id, imsi, plmn_id, opc, "key", sequence_number
`

type CreateSubscriberParams struct {
	Imsi           string
	PlmnID         string
	Opc            string
	Key            string
	SequenceNumber int64
}

func (q *Queries) CreateSubscriber(ctx context.Context, arg CreateSubscriberParams) (Subscriber, error) {
	row := q.db.QueryRowContext(ctx, createSubscriber,
		arg.Imsi,
		arg.PlmnID,
		arg.Opc,
		arg.Key,
		arg.SequenceNumber,
	)
	var i Subscriber
	err := row.Scan(
		&i.ID,
		&i.Imsi,
		&i.PlmnID,
		&i.Opc,
		&i.Key,
		&i.SequenceNumber,
	)
	return i, err
}

const deleteSubscriber = `-- name: DeleteSubscriber :exec
DELETE FROM subscribers
WHERE id = ?
`

func (q *Queries) DeleteSubscriber(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSubscriber, id)
	return err
}

const getSubscriber = `-- name: GetSubscriber :one
SELECT id, imsi, plmn_id, opc, "key", sequence_number FROM subscribers
WHERE id = ? LIMIT 1
`

func (q *Queries) GetSubscriber(ctx context.Context, id int64) (Subscriber, error) {
	row := q.db.QueryRowContext(ctx, getSubscriber, id)
	var i Subscriber
	err := row.Scan(
		&i.ID,
		&i.Imsi,
		&i.PlmnID,
		&i.Opc,
		&i.Key,
		&i.SequenceNumber,
	)
	return i, err
}

const getSubscriberByImsi = `-- name: GetSubscriberByImsi :one
SELECT id, imsi, plmn_id, opc, "key", sequence_number FROM subscribers
WHERE imsi = ? LIMIT 1
`

func (q *Queries) GetSubscriberByImsi(ctx context.Context, imsi string) (Subscriber, error) {
	row := q.db.QueryRowContext(ctx, getSubscriberByImsi, imsi)
	var i Subscriber
	err := row.Scan(
		&i.ID,
		&i.Imsi,
		&i.PlmnID,
		&i.Opc,
		&i.Key,
		&i.SequenceNumber,
	)
	return i, err
}

const listSubscribers = `-- name: ListSubscribers :many
SELECT id, imsi, plmn_id, opc, "key", sequence_number FROM subscribers
ORDER BY imsi
`

func (q *Queries) ListSubscribers(ctx context.Context) ([]Subscriber, error) {
	rows, err := q.db.QueryContext(ctx, listSubscribers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscriber
	for rows.Next() {
		var i Subscriber
		if err := rows.Scan(
			&i.ID,
			&i.Imsi,
			&i.PlmnID,
			&i.Opc,
			&i.Key,
			&i.SequenceNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const numSubscribers = `-- name: NumSubscribers :one
SELECT COUNT(*) FROM subscribers
`

func (q *Queries) NumSubscribers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, numSubscribers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateSubscriber = `-- name: UpdateSubscriber :exec
UPDATE subscribers
set imsi = ?, plmn_id = ?, opc = ?, key = ?, sequence_number = ?
WHERE id = ?
`

type UpdateSubscriberParams struct {
	Imsi           string
	PlmnID         string
	Opc            string
	Key            string
	SequenceNumber int64
	ID             int64
}

func (q *Queries) UpdateSubscriber(ctx context.Context, arg UpdateSubscriberParams) error {
	_, err := q.db.ExecContext(ctx, updateSubscriber,
		arg.Imsi,
		arg.PlmnID,
		arg.Opc,
		arg.Key,
		arg.SequenceNumber,
		arg.ID,
	)
	return err
}
