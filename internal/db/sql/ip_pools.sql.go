// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: ip_pools.sql

package sql

import (
	"context"
)

const allocateIP = `-- name: AllocateIP :exec
INSERT INTO AllocatedIP (
  imsi, ip_address, pool_id
) VALUES (
  ?, ?, ?
)
`

type AllocateIPParams struct {
	Imsi      string
	IpAddress string
	PoolID    int64
}

func (q *Queries) AllocateIP(ctx context.Context, arg AllocateIPParams) error {
	_, err := q.db.ExecContext(ctx, allocateIP, arg.Imsi, arg.IpAddress, arg.PoolID)
	return err
}

const createIPPool = `-- name: CreateIPPool :one
INSERT INTO IPPool (cidr)
VALUES (?)
RETURNING id
`

func (q *Queries) CreateIPPool(ctx context.Context, cidr string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createIPPool, cidr)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const findAvailableIP = `-- name: FindAvailableIP :one
SELECT ip_address FROM AllocatedIP
WHERE ip_address = ? AND pool_id = ?
`

type FindAvailableIPParams struct {
	IpAddress string
	PoolID    int64
}

func (q *Queries) FindAvailableIP(ctx context.Context, arg FindAvailableIPParams) (string, error) {
	row := q.db.QueryRowContext(ctx, findAvailableIP, arg.IpAddress, arg.PoolID)
	var ip_address string
	err := row.Scan(&ip_address)
	return ip_address, err
}

const getAllocatedIPByIMSI = `-- name: GetAllocatedIPByIMSI :one
SELECT id, imsi, ip_address, pool_id, allocated_at FROM AllocatedIP
WHERE imsi = ?
`

func (q *Queries) GetAllocatedIPByIMSI(ctx context.Context, imsi string) (AllocatedIP, error) {
	row := q.db.QueryRowContext(ctx, getAllocatedIPByIMSI, imsi)
	var i AllocatedIP
	err := row.Scan(
		&i.ID,
		&i.Imsi,
		&i.IpAddress,
		&i.PoolID,
		&i.AllocatedAt,
	)
	return i, err
}

const getIPPoolByCIDR = `-- name: GetIPPoolByCIDR :one
SELECT id, device_group_id, cidr FROM IPPool
WHERE cidr = ?
`

func (q *Queries) GetIPPoolByCIDR(ctx context.Context, cidr string) (IPPool, error) {
	row := q.db.QueryRowContext(ctx, getIPPoolByCIDR, cidr)
	var i IPPool
	err := row.Scan(&i.ID, &i.DeviceGroupID, &i.Cidr)
	return i, err
}

const getIPPoolCIDR = `-- name: GetIPPoolCIDR :one
SELECT cidr FROM IPPool
WHERE id = ?
`

func (q *Queries) GetIPPoolCIDR(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getIPPoolCIDR, id)
	var cidr string
	err := row.Scan(&cidr)
	return cidr, err
}

const releaseIP = `-- name: ReleaseIP :exec
DELETE FROM AllocatedIP
WHERE imsi = ?
`

func (q *Queries) ReleaseIP(ctx context.Context, imsi string) error {
	_, err := q.db.ExecContext(ctx, releaseIP, imsi)
	return err
}
