// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: network_slices.sql

package sql

import (
	"context"
)

const createNetworkSlice = `-- name: CreateNetworkSlice :one
INSERT INTO network_slices (
  name, sst, sd, site_name, mcc, mnc
) VALUES (
  ?, ?, ?, ?, ?, ?
)
RETURNING id, name, sst, sd, site_name, mcc, mnc
`

type CreateNetworkSliceParams struct {
	Name     string
	Sst      int64
	Sd       string
	SiteName string
	Mcc      string
	Mnc      string
}

func (q *Queries) CreateNetworkSlice(ctx context.Context, arg CreateNetworkSliceParams) (NetworkSlice, error) {
	row := q.db.QueryRowContext(ctx, createNetworkSlice,
		arg.Name,
		arg.Sst,
		arg.Sd,
		arg.SiteName,
		arg.Mcc,
		arg.Mnc,
	)
	var i NetworkSlice
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Sst,
		&i.Sd,
		&i.SiteName,
		&i.Mcc,
		&i.Mnc,
	)
	return i, err
}

const deleteNetworkSlice = `-- name: DeleteNetworkSlice :exec
DELETE FROM network_slices
WHERE id = ?
`

func (q *Queries) DeleteNetworkSlice(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNetworkSlice, id)
	return err
}

const getNetworkSlice = `-- name: GetNetworkSlice :one
SELECT id, name, sst, sd, site_name, mcc, mnc FROM network_slices
WHERE id = ? LIMIT 1
`

func (q *Queries) GetNetworkSlice(ctx context.Context, id int64) (NetworkSlice, error) {
	row := q.db.QueryRowContext(ctx, getNetworkSlice, id)
	var i NetworkSlice
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Sst,
		&i.Sd,
		&i.SiteName,
		&i.Mcc,
		&i.Mnc,
	)
	return i, err
}

const getNetworkSliceByName = `-- name: GetNetworkSliceByName :one
SELECT id, name, sst, sd, site_name, mcc, mnc FROM network_slices
WHERE name = ? LIMIT 1
`

func (q *Queries) GetNetworkSliceByName(ctx context.Context, name string) (NetworkSlice, error) {
	row := q.db.QueryRowContext(ctx, getNetworkSliceByName, name)
	var i NetworkSlice
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Sst,
		&i.Sd,
		&i.SiteName,
		&i.Mcc,
		&i.Mnc,
	)
	return i, err
}

const listNetworkSlices = `-- name: ListNetworkSlices :many
SELECT id, name, sst, sd, site_name, mcc, mnc FROM network_slices
ORDER BY id
`

func (q *Queries) ListNetworkSlices(ctx context.Context) ([]NetworkSlice, error) {
	rows, err := q.db.QueryContext(ctx, listNetworkSlices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NetworkSlice
	for rows.Next() {
		var i NetworkSlice
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Sst,
			&i.Sd,
			&i.SiteName,
			&i.Mcc,
			&i.Mnc,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const numNetworkSlices = `-- name: NumNetworkSlices :one
SELECT COUNT(*) FROM network_slices
`

func (q *Queries) NumNetworkSlices(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, numNetworkSlices)
	var count int64
	err := row.Scan(&count)
	return count, err
}
