// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: upfs.sql

package sql

import (
	"context"
	"database/sql"
)

const createUPF = `-- name: CreateUPF :one
INSERT INTO upfs (
  name, network_slice_id
) VALUES (
  ?, ?
)
RETURNING id, name, network_slice_id
`

type CreateUPFParams struct {
	Name           string
	NetworkSliceID sql.NullInt64
}

func (q *Queries) CreateUPF(ctx context.Context, arg CreateUPFParams) (Upf, error) {
	row := q.db.QueryRowContext(ctx, createUPF, arg.Name, arg.NetworkSliceID)
	var i Upf
	err := row.Scan(&i.ID, &i.Name, &i.NetworkSliceID)
	return i, err
}

const deleteUPF = `-- name: DeleteUPF :exec
DELETE FROM upfs
WHERE id = ?
`

func (q *Queries) DeleteUPF(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUPF, id)
	return err
}

const getUPF = `-- name: GetUPF :one
SELECT id, name, network_slice_id FROM upfs
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUPF(ctx context.Context, id int64) (Upf, error) {
	row := q.db.QueryRowContext(ctx, getUPF, id)
	var i Upf
	err := row.Scan(&i.ID, &i.Name, &i.NetworkSliceID)
	return i, err
}

const getUPFByName = `-- name: GetUPFByName :one
SELECT id, name, network_slice_id FROM upfs
WHERE name = ? LIMIT 1
`

func (q *Queries) GetUPFByName(ctx context.Context, name string) (Upf, error) {
	row := q.db.QueryRowContext(ctx, getUPFByName, name)
	var i Upf
	err := row.Scan(&i.ID, &i.Name, &i.NetworkSliceID)
	return i, err
}

const listUPFs = `-- name: ListUPFs :many
SELECT id, name, network_slice_id FROM upfs
ORDER BY id
`

func (q *Queries) ListUPFs(ctx context.Context) ([]Upf, error) {
	rows, err := q.db.QueryContext(ctx, listUPFs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Upf
	for rows.Next() {
		var i Upf
		if err := rows.Scan(&i.ID, &i.Name, &i.NetworkSliceID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const numUPFs = `-- name: NumUPFs :one
SELECT COUNT(*) FROM upfs
`

func (q *Queries) NumUPFs(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, numUPFs)
	var count int64
	err := row.Scan(&count)
	return count, err
}
