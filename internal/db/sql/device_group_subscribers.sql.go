// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: device_group_subscribers.sql

package sql

import (
	"context"
)

const createDeviceGroupSubscriber = `-- name: CreateDeviceGroupSubscriber :exec
INSERT INTO device_group_subscribers (
  device_group_id, subscriber_id
) VALUES (
  ?, ?
)
`

type CreateDeviceGroupSubscriberParams struct {
	DeviceGroupID int64
	SubscriberID  int64
}

func (q *Queries) CreateDeviceGroupSubscriber(ctx context.Context, arg CreateDeviceGroupSubscriberParams) error {
	_, err := q.db.ExecContext(ctx, createDeviceGroupSubscriber, arg.DeviceGroupID, arg.SubscriberID)
	return err
}

const deleteDeviceGroupSubscriber = `-- name: DeleteDeviceGroupSubscriber :exec
DELETE FROM device_group_subscribers
WHERE device_group_id = ? AND subscriber_id = ?
`

type DeleteDeviceGroupSubscriberParams struct {
	DeviceGroupID int64
	SubscriberID  int64
}

func (q *Queries) DeleteDeviceGroupSubscriber(ctx context.Context, arg DeleteDeviceGroupSubscriberParams) error {
	_, err := q.db.ExecContext(ctx, deleteDeviceGroupSubscriber, arg.DeviceGroupID, arg.SubscriberID)
	return err
}

const getDeviceGroupSubscriber = `-- name: GetDeviceGroupSubscriber :one
SELECT device_group_id, subscriber_id FROM device_group_subscribers
WHERE device_group_id = ? AND subscriber_id = ?
LIMIT 1
`

type GetDeviceGroupSubscriberParams struct {
	DeviceGroupID int64
	SubscriberID  int64
}

func (q *Queries) GetDeviceGroupSubscriber(ctx context.Context, arg GetDeviceGroupSubscriberParams) (DeviceGroupSubscriber, error) {
	row := q.db.QueryRowContext(ctx, getDeviceGroupSubscriber, arg.DeviceGroupID, arg.SubscriberID)
	var i DeviceGroupSubscriber
	err := row.Scan(&i.DeviceGroupID, &i.SubscriberID)
	return i, err
}

const listDeviceGroupSubscribers = `-- name: ListDeviceGroupSubscribers :many
SELECT device_group_id, subscriber_id FROM device_group_subscribers
WHERE device_group_id = ?
`

func (q *Queries) ListDeviceGroupSubscribers(ctx context.Context, deviceGroupID int64) ([]DeviceGroupSubscriber, error) {
	rows, err := q.db.QueryContext(ctx, listDeviceGroupSubscribers, deviceGroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeviceGroupSubscriber
	for rows.Next() {
		var i DeviceGroupSubscriber
		if err := rows.Scan(&i.DeviceGroupID, &i.SubscriberID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
