// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: network_slice_gnbs.sql

package sql

import (
	"context"
)

const createNetworkSliceGnb = `-- name: CreateNetworkSliceGnb :exec
INSERT INTO network_slice_gnbs (
  network_slice_id, gnb_id
) VALUES (
  ?, ?
)
`

type CreateNetworkSliceGnbParams struct {
	NetworkSliceID int64
	GnbID          int64
}

func (q *Queries) CreateNetworkSliceGnb(ctx context.Context, arg CreateNetworkSliceGnbParams) error {
	_, err := q.db.ExecContext(ctx, createNetworkSliceGnb, arg.NetworkSliceID, arg.GnbID)
	return err
}

const deleteNetworkSliceGnb = `-- name: DeleteNetworkSliceGnb :exec
DELETE FROM network_slice_gnbs
WHERE network_slice_id = ? AND gnb_id = ?
`

type DeleteNetworkSliceGnbParams struct {
	NetworkSliceID int64
	GnbID          int64
}

func (q *Queries) DeleteNetworkSliceGnb(ctx context.Context, arg DeleteNetworkSliceGnbParams) error {
	_, err := q.db.ExecContext(ctx, deleteNetworkSliceGnb, arg.NetworkSliceID, arg.GnbID)
	return err
}

const getNetworkSliceGnb = `-- name: GetNetworkSliceGnb :one
SELECT network_slice_id, gnb_id FROM network_slice_gnbs
WHERE network_slice_id = ? AND gnb_id = ?
LIMIT 1
`

type GetNetworkSliceGnbParams struct {
	NetworkSliceID int64
	GnbID          int64
}

func (q *Queries) GetNetworkSliceGnb(ctx context.Context, arg GetNetworkSliceGnbParams) (NetworkSliceGnb, error) {
	row := q.db.QueryRowContext(ctx, getNetworkSliceGnb, arg.NetworkSliceID, arg.GnbID)
	var i NetworkSliceGnb
	err := row.Scan(&i.NetworkSliceID, &i.GnbID)
	return i, err
}

const listNetworkSliceGnbs = `-- name: ListNetworkSliceGnbs :many
SELECT network_slice_id, gnb_id FROM network_slice_gnbs
WHERE network_slice_id = ?
`

func (q *Queries) ListNetworkSliceGnbs(ctx context.Context, networkSliceID int64) ([]NetworkSliceGnb, error) {
	rows, err := q.db.QueryContext(ctx, listNetworkSliceGnbs, networkSliceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NetworkSliceGnb
	for rows.Next() {
		var i NetworkSliceGnb
		if err := rows.Scan(&i.NetworkSliceID, &i.GnbID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
