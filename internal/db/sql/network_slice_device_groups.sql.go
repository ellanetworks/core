// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: network_slice_device_groups.sql

package sql

import (
	"context"
)

const createNetworkSliceDeviceGroup = `-- name: CreateNetworkSliceDeviceGroup :exec
INSERT INTO network_slice_device_groups (
  network_slice_id, device_group_id
) VALUES (
  ?, ?
)
`

type CreateNetworkSliceDeviceGroupParams struct {
	NetworkSliceID int64
	DeviceGroupID  int64
}

func (q *Queries) CreateNetworkSliceDeviceGroup(ctx context.Context, arg CreateNetworkSliceDeviceGroupParams) error {
	_, err := q.db.ExecContext(ctx, createNetworkSliceDeviceGroup, arg.NetworkSliceID, arg.DeviceGroupID)
	return err
}

const deleteNetworkSliceDeviceGroup = `-- name: DeleteNetworkSliceDeviceGroup :exec
DELETE FROM network_slice_device_groups
WHERE network_slice_id = ? AND device_group_id = ?
`

type DeleteNetworkSliceDeviceGroupParams struct {
	NetworkSliceID int64
	DeviceGroupID  int64
}

func (q *Queries) DeleteNetworkSliceDeviceGroup(ctx context.Context, arg DeleteNetworkSliceDeviceGroupParams) error {
	_, err := q.db.ExecContext(ctx, deleteNetworkSliceDeviceGroup, arg.NetworkSliceID, arg.DeviceGroupID)
	return err
}

const getNetworkSliceDeviceGroup = `-- name: GetNetworkSliceDeviceGroup :one
SELECT network_slice_id, device_group_id FROM network_slice_device_groups
WHERE network_slice_id = ? AND device_group_id = ?
LIMIT 1
`

type GetNetworkSliceDeviceGroupParams struct {
	NetworkSliceID int64
	DeviceGroupID  int64
}

func (q *Queries) GetNetworkSliceDeviceGroup(ctx context.Context, arg GetNetworkSliceDeviceGroupParams) (NetworkSliceDeviceGroup, error) {
	row := q.db.QueryRowContext(ctx, getNetworkSliceDeviceGroup, arg.NetworkSliceID, arg.DeviceGroupID)
	var i NetworkSliceDeviceGroup
	err := row.Scan(&i.NetworkSliceID, &i.DeviceGroupID)
	return i, err
}

const listNetworkSliceDeviceGroups = `-- name: ListNetworkSliceDeviceGroups :many
SELECT network_slice_id, device_group_id FROM network_slice_device_groups
WHERE network_slice_id = ?
`

func (q *Queries) ListNetworkSliceDeviceGroups(ctx context.Context, networkSliceID int64) ([]NetworkSliceDeviceGroup, error) {
	rows, err := q.db.QueryContext(ctx, listNetworkSliceDeviceGroups, networkSliceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NetworkSliceDeviceGroup
	for rows.Next() {
		var i NetworkSliceDeviceGroup
		if err := rows.Scan(&i.NetworkSliceID, &i.DeviceGroupID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
