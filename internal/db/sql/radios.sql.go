// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: radios.sql

package sql

import (
	"context"
	"database/sql"
)

const createRadio = `-- name: CreateRadio :one
INSERT INTO radios (
  name, tac, network_slice_id
) VALUES (
  ?, ?, ?
)
RETURNING id, name, tac, network_slice_id
`

type CreateRadioParams struct {
	Name           string
	Tac            string
	NetworkSliceID sql.NullInt64
}

func (q *Queries) CreateRadio(ctx context.Context, arg CreateRadioParams) (Radio, error) {
	row := q.db.QueryRowContext(ctx, createRadio, arg.Name, arg.Tac, arg.NetworkSliceID)
	var i Radio
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tac,
		&i.NetworkSliceID,
	)
	return i, err
}

const deleteRadio = `-- name: DeleteRadio :exec
DELETE FROM radios
WHERE id = ?
`

func (q *Queries) DeleteRadio(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRadio, id)
	return err
}

const getRadio = `-- name: GetRadio :one
SELECT id, name, tac, network_slice_id FROM radios
WHERE id = ? LIMIT 1
`

func (q *Queries) GetRadio(ctx context.Context, id int64) (Radio, error) {
	row := q.db.QueryRowContext(ctx, getRadio, id)
	var i Radio
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tac,
		&i.NetworkSliceID,
	)
	return i, err
}

const getRadioByName = `-- name: GetRadioByName :one
SELECT id, name, tac, network_slice_id FROM radios
WHERE name = ? LIMIT 1
`

func (q *Queries) GetRadioByName(ctx context.Context, name string) (Radio, error) {
	row := q.db.QueryRowContext(ctx, getRadioByName, name)
	var i Radio
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tac,
		&i.NetworkSliceID,
	)
	return i, err
}

const listRadios = `-- name: ListRadios :many
SELECT id, name, tac, network_slice_id FROM radios
ORDER BY id
`

func (q *Queries) ListRadios(ctx context.Context) ([]Radio, error) {
	rows, err := q.db.QueryContext(ctx, listRadios)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Radio
	for rows.Next() {
		var i Radio
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Tac,
			&i.NetworkSliceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const numRadios = `-- name: NumRadios :one
SELECT COUNT(*) FROM radios
`

func (q *Queries) NumRadios(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, numRadios)
	var count int64
	err := row.Scan(&count)
	return count, err
}
