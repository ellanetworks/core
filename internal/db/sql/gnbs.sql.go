// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: gnbs.sql

package sql

import (
	"context"
	"database/sql"
)

const createGnb = `-- name: CreateGnb :one
INSERT INTO gnbs (
  name, tac, network_slice_id
) VALUES (
  ?, ?, ?
)
RETURNING id, name, tac, network_slice_id
`

type CreateGnbParams struct {
	Name           string
	Tac            string
	NetworkSliceID sql.NullInt64
}

func (q *Queries) CreateGnb(ctx context.Context, arg CreateGnbParams) (Gnb, error) {
	row := q.db.QueryRowContext(ctx, createGnb, arg.Name, arg.Tac, arg.NetworkSliceID)
	var i Gnb
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tac,
		&i.NetworkSliceID,
	)
	return i, err
}

const deleteGnb = `-- name: DeleteGnb :exec
DELETE FROM gnbs
WHERE id = ?
`

func (q *Queries) DeleteGnb(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGnb, id)
	return err
}

const getGnb = `-- name: GetGnb :one
SELECT id, name, tac, network_slice_id FROM gnbs
WHERE id = ? LIMIT 1
`

func (q *Queries) GetGnb(ctx context.Context, id int64) (Gnb, error) {
	row := q.db.QueryRowContext(ctx, getGnb, id)
	var i Gnb
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tac,
		&i.NetworkSliceID,
	)
	return i, err
}

const getGnbByName = `-- name: GetGnbByName :one
SELECT id, name, tac, network_slice_id FROM gnbs
WHERE name = ? LIMIT 1
`

func (q *Queries) GetGnbByName(ctx context.Context, name string) (Gnb, error) {
	row := q.db.QueryRowContext(ctx, getGnbByName, name)
	var i Gnb
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tac,
		&i.NetworkSliceID,
	)
	return i, err
}

const listGnbs = `-- name: ListGnbs :many
SELECT id, name, tac, network_slice_id FROM gnbs
ORDER BY id
`

func (q *Queries) ListGnbs(ctx context.Context) ([]Gnb, error) {
	rows, err := q.db.QueryContext(ctx, listGnbs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Gnb
	for rows.Next() {
		var i Gnb
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Tac,
			&i.NetworkSliceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const numGnbs = `-- name: NumGnbs :one
SELECT COUNT(*) FROM gnbs
`

func (q *Queries) NumGnbs(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, numGnbs)
	var count int64
	err := row.Scan(&count)
	return count, err
}
